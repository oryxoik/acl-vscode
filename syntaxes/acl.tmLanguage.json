{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CustomLogic",
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants-and-special-vars"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "constants-and-special-vars": {
      "patterns": [
        {
          "name": "constant.language.acl",
          "match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)"
        },
        {
          "name": "variable.language.acl",
          "match": "(?<!\\$)\\b(self)\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.acl",
          "match": "\\b([0-9]+(?:\\.[0-9]+)?)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.acl",
          "match": "\\b(if|elif|else|while|for|in|wait|return)\\b"
        },
        {
          "match": "(?<!\\$)\\b(class|component|extension|cutscene)\\b(?!\\$)",
          "name": "storage.type.primitive.acl"
        },
        {
          "match": "(?<!\\$)\\b(function|coroutine)\\b(?!\\$)",
          "name": "storage.type.primitive.acl"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.acl",
          "match": "(==|!=|<=?|>=?)"
        },
        {
          "name": "keyword.operator.assignment.acl",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.arithmetic.acl",
          "match": "(\\-|\\+|\\*|\\/|\\~\\/)"
        },
        {
          "name": "keyword.operator.logical.acl",
          "match": "(!|&&|\\|\\|)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block",
          "begin": "#",
          "end": "#",
          "patterns": [
            {
              "name": "constant.character.escape.acl",
              "match": "\\\\( )*#"
            }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.acl",
      "begin": "\"",
      "end": "\""
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.acl",
          "match": ","
        },
        {
          "name": "punctuation.terminator.acl",
          "match": ";"
        },
        {
          "name": "punctuation.dot.acl",
          "match": "\\."
        }
      ]
    }
  },
  "scopeName": "source.acl"
}
